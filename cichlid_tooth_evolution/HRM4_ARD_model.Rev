### ARD model witjh 4 hidden states ###

morpho <- readDiscreteCharacterData("cichlid_tooth_states.nex")
morpho_exp = morpho.expandCharacters( 4 ) # Expand for 4 possible states for each character #
morpho_exp.show()
moves = VectorMoves()
monitors = VectorMonitors()
phylogeny <- readTrees("cichlid_tree.nex")[1]

for (i in 1:8) {
  for (j in 1:8) {
    rates[i][j] <- 0.0
  }
}

NUM_HIDDEN_STATES = 4
rate_pr := phylogeny.treeLength() / 100
H <- 0.587405
SD_PRIOR <- 1/H

rate_gain_median ~ dnExponential( rate_pr )
rate_gain_sd ~ dnExponential( SD_PRIOR )
moves.append( mvScale( rate_gain_median, weight=2 ) )
moves.append( mvScale( rate_gain_sd, weight=2 ) )
rate_gain := fnDiscretizeDistribution( dnLognormal( ln(rate_gain_median), rate_gain_sd ), NUM_HIDDEN_STATES )

rate_loss_median ~ dnExponential( rate_pr )
rate_loss_sd ~ dnExponential( SD_PRIOR )
moves.append( mvScale( rate_loss_median, weight=2 ) )
moves.append( mvScale( rate_loss_sd, weight=2 ) )
rate_loss := fnDiscretizeDistribution( dnLognormal( ln(rate_loss_median), rate_loss_sd ), NUM_HIDDEN_STATES )

switch_VS_S ~ dnExponential( rate_pr )
switch_VS_F ~ dnExponential( rate_pr )
switch_VS_VF ~ dnExponential( rate_pr )
switch_S_VS ~ dnExponential( rate_pr )
switch_S_F ~ dnExponential( rate_pr )
switch_S_VF ~ dnExponential( rate_pr )
switch_F_VS ~ dnExponential( rate_pr )
switch_F_S ~ dnExponential( rate_pr )
switch_F_VF ~ dnExponential( rate_pr )
switch_VF_VS ~ dnExponential( rate_pr )
switch_VF_S ~ dnExponential( rate_pr )
switch_VF_F ~ dnExponential( rate_pr )

moves.append( mvScale( switch_VS_S, weight=2 ) )
moves.append( mvScale( switch_VS_F, weight=2 ) )
moves.append( mvScale( switch_VS_VF, weight=2 ) )
moves.append( mvScale( switch_S_VS, weight=2 ) )
moves.append( mvScale( switch_S_F, weight=2 ) )
moves.append( mvScale( switch_S_VF, weight=2 ) )
moves.append( mvScale( switch_F_VS, weight=2 ) )
moves.append( mvScale( switch_F_S, weight=2 ) )
moves.append( mvScale( switch_F_VF, weight=2 ) )
moves.append( mvScale( switch_VF_VS, weight=2 ) )
moves.append( mvScale( switch_VF_S, weight=2 ) )
moves.append( mvScale( switch_VF_F, weight=2 ) )

rates[1][2] := rate_gain[1]
rates[1][3] := switch_VS_S	# 0VS->0S
rates[1][5] := switch_VS_F	# 0VS->0F
rates[1][7] := switch_VS_VF	# 0VS->0VF
rates[2][1] := rate_loss[1]
rates[2][4] := switch_VS_S	# 1VS->1S
rates[2][6] := switch_VS_F	# 1VS->1F
rates[2][8] := switch_VS_VF	# 1VS->1VF
rates[3][1] := switch_S_VS	# 0S->0VS
rates[3][4] := rate_gain[2]
rates[3][5] := switch_S_F	# 0S->0F
rates[3][7] := switch_S_VF	# 0S->0VF
rates[4][2] := switch_S_VS	# 1S->1VS
rates[4][3] := rate_loss[2]
rates[4][6] := switch_S_F	# 1S->1F
rates[4][8] := switch_S_VF	# 1S->1VF
rates[5][1] := switch_F_VS	# 0F->0VS
rates[5][3] := switch_F_S	# 0F->0S
rates[5][6] := rate_gain[3]
rates[5][7] := switch_F_VF	# 0F->0VF
rates[6][2] := switch_F_VS	# 1F->1VS
rates[6][4] := switch_F_S	# 1F->1S
rates[6][5] := rate_loss[3]
rates[6][8] := switch_F_VF	# 1F->1VF
rates[7][1] := switch_VF_VS	# 0VF->0VS
rates[7][3] := switch_VF_S	# 0VF->0S
rates[7][5] := switch_VF_F	# 0VF->0F
rates[7][8] := rate_gain[4]
rates[8][2] := switch_VF_VS	# 1VF->1VS
rates[8][4] := switch_VF_S	# 1VF-1S
rates[8][6] := switch_VF_F	# 1VF->1F
rates[8][7] := rate_loss[4]

Q_morpho := fnFreeK(rates, rescaled=FALSE)

### Draw root state frequencies from Dirichlet prior distribution ###
rf_prior <- rep(1,4*2)
rf ~ dnDirichlet( rf_prior )
moves.append( mvBetaSimplex( rf, weight=2 ) )
moves.append( mvDirichletSimplex( rf, weight=2 ) )

phyMorpho ~ dnPhyloCTMC(tree=phylogeny, Q=Q_morpho, rootFrequencies=rf, type="NaturalNumbers")
phyMorpho.clamp(morpho_exp)
mymodel = model(phylogeny)

monitors.append( mnModel(filename="HRM4_output/cichlid_tooth_hrm4_ard.log", printgen=1) )
monitors.append( mnScreen(printgen=10) )
monitors.append( mnJointConditionalAncestralState(tree=phylogeny,
                                                 ctmc=phyMorpho,
                                                 filename="HRM4_output/cichlid_tooth_hrm4_ard.states.txt",
                                                 type="NaturalNumbers",
                                                 printgen=1,
                                                 withTips=true,
                                                 withStartStates=false) )
monitors.append( mnStochasticCharacterMap(ctmc=phyMorpho,
                                          filename="HRM4_output/cichlid_tooth_hrm4_ard_stoch_char_map.log",
                                          printgen=1,
                                          include_simmap=true) )

### Estimate marginal likelihoods ###
pow_p = powerPosterior(mymodel, moves, monitors, "HRM4_ard_output/HRM4_ard_tooth.out", cats=100) 
pow_p.burnin(generations=10000,tuningInterval=1000)
pow_p.run(generations=1000)  

### Stepping stone sampler ###
ss = steppingStoneSampler(file="HRM4_output/HRM4_tooth.out", powerColumnName="power", likelihoodColumnName="likelihood")
ss.marginal()

q()




