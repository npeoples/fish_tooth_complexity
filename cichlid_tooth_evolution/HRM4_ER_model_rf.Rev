### ER model with 4 hidden states ###
### This script includes a specified probability of the root states. ###
### This specifies that there is an equal probability of simple or   ###
### complex teeth at the root, but the associated hidden states are  ###
### constrained to be the two "slower" (low and very low lability    ###
### hidden states.                                                   ###

morpho <- readDiscreteCharacterData("cichlid_tooth_states.nex")
morpho_exp = morpho.expandCharacters( 4 ) # Expand for 4 possible states for each character #
morpho_exp.show()
moves = VectorMoves()
monitors = VectorMonitors()
phylogeny <- readTrees("cichlid_tree.nex")[1]

for (i in 1:8) {
  for (j in 1:8) {
    rates[i][j] <- 0.0
  }
}

NUM_HIDDEN_STATES = 4
rate_pr := phylogeny.treeLength() / 100
H <- 0.587405
SD_PRIOR <- 1/H

rate_switch_median ~ dnExponential( rate_pr )
rate_switch_sd ~ dnExponential( SD_PRIOR )
moves.append( mvScale( rate_switch_median, weight=2 ) )
moves.append( mvScale( rate_switch_sd, weight=2 ) )
rate_switch := fnDiscretizeDistribution( dnLognormal( ln(rate_switch_median), rate_switch_sd ), 4 )

switch_VS_S ~ dnExponential( rate_pr )
switch_VS_F ~ dnExponential( rate_pr )
switch_VS_VF ~ dnExponential( rate_pr )
switch_S_VS ~ dnExponential( rate_pr )
switch_S_F ~ dnExponential( rate_pr )
switch_S_VF ~ dnExponential( rate_pr )
switch_F_VS ~ dnExponential( rate_pr )
switch_F_S ~ dnExponential( rate_pr )
switch_F_VF ~ dnExponential( rate_pr )
switch_VF_VS ~ dnExponential( rate_pr )
switch_VF_S ~ dnExponential( rate_pr )
switch_VF_F ~ dnExponential( rate_pr )

moves.append( mvScale( switch_VS_S, weight=2 ) )
moves.append( mvScale( switch_VS_F, weight=2 ) )
moves.append( mvScale( switch_VS_VF, weight=2 ) )
moves.append( mvScale( switch_S_VS, weight=2 ) )
moves.append( mvScale( switch_S_F, weight=2 ) )
moves.append( mvScale( switch_S_VF, weight=2 ) )
moves.append( mvScale( switch_F_VS, weight=2 ) )
moves.append( mvScale( switch_F_S, weight=2 ) )
moves.append( mvScale( switch_F_VF, weight=2 ) )
moves.append( mvScale( switch_VF_VS, weight=2 ) )
moves.append( mvScale( switch_VF_S, weight=2 ) )
moves.append( mvScale( switch_VF_F, weight=2 ) )

rates[1][2] := rate_switch[1]   # 0VS->1VS
rates[1][3] := switch_VS_S	# 0VS->0S
rates[1][5] := switch_VS_F	# 0VS->0F
rates[1][7] := switch_VS_VF	# 0VS->0VF
rates[2][1] := rate_switch[1]   # 1VS->0VS
rates[2][4] := switch_VS_S	# 1VS->1S
rates[2][6] := switch_VS_F	# 1VS->1F
rates[2][8] := switch_VS_VF	# 1VS->1VF
rates[3][1] := switch_S_VS	# 0S->0VS
rates[3][4] := rate_switch[2]   # 0S->1S
rates[3][5] := switch_S_F	# 0S->0F
rates[3][7] := switch_S_VF	# 0S->0VF
rates[4][2] := switch_S_VS	# 1S->1VS
rates[4][3] := rate_switch[2]   # 1S->0S
rates[4][6] := switch_S_F	# 1S->1F
rates[4][8] := switch_S_VF	# 1S->1VF
rates[5][1] := switch_F_VS	# 0F->0VS
rates[5][3] := switch_F_S	# 0F->0S
rates[5][6] := rate_switch[3]   # 0F->1F
rates[5][7] := switch_F_VF	# 0F->0VF
rates[6][2] := switch_F_VS	# 1F->1VS
rates[6][4] := switch_F_S	# 1F->1S
rates[6][5] := rate_switch[3]   # 1F->0F
rates[6][8] := switch_F_VF	# 1F->1VF
rates[7][1] := switch_VF_VS	# 0VF->0VS
rates[7][3] := switch_VF_S	# 0VF->0S
rates[7][5] := switch_VF_F	# 0VF->0F
rates[7][8] := rate_switch[4]   # 0VF->1VF
rates[8][2] := switch_VF_VS	# 1VF->1VS
rates[8][4] := switch_VF_S	# 1VF-1S
rates[8][6] := switch_VF_F	# 1VF->1F
rates[8][7] := rate_switch[4]   # 1VF->0VF

Q_morpho := fnFreeK(rates, rescaled=FALSE)

### Modified root state ###
root_f <- [ 0.25, 0.25, 0.25, 0.25, 0, 0, 0, 0 ]

phyMorpho ~ dnPhyloCTMC(tree=phylogeny, Q=Q_morpho, rootFrequencies=root_f, type="NaturalNumbers")
phyMorpho.clamp(morpho_exp)
mymodel = model(phylogeny)

monitors.append( mnModel(filename="HRM4_ER_output_FINAL_rf/cichlid_tooth_hrm4_er_rf.log", printgen=1) )
monitors.append( mnScreen(printgen=1) )
monitors.append( mnJointConditionalAncestralState(tree=phylogeny,
                                                 ctmc=phyMorpho,
                                                 filename="HRM4_ER_output_rf/cichlid_tooth_hrm4_er_rf.states.txt",
                                                 type="NaturalNumbers",
                                                 printgen=100,
                                                 withTips=true,
                                                 withStartStates=false) )
monitors.append( mnStochasticCharacterMap(ctmc=phyMorpho,
                                          filename="HRM4_ER_output_rf/cichlid_tooth_hrm4_er_rf_stoch_char_map.log",
                                          printgen=100,
                                          include_simmap=true) )

mymcmc = mcmc(mymodel, monitors, moves, nruns=1, combine="mixed")
mymcmc.run(generations=50000, tuningInterval=100)

anc_states = readAncestralStateTrace("HRM4_ER_output_rf/cichlid_tooth_hrm4_er_rf.states.txt")
anc_tree = ancestralStateTree(tree=phylogeny, ancestral_state_trace_vector=anc_states, include_start_states=false, file="HRM4_ER_output_rf/cichlid_tooth_ase_hrm4_er_rf.tree", burnin=0.25, summary_statistic="MAP", site=1, nStates=2*2)

anc_states_stoch_map = readAncestralStateTrace("HRM4_ER_output_rf/cichlid_tooth_hrm4_er_rf_stoch_char_map.log")
summarizeCharacterMaps(anc_states_stoch_map, phylogeny, file="HRM4_ER_output_rf/cichlid_tooth_hrm4_er_rf_stoch_summary.tsv", burnin=0.25)

characterMapTree(tree=phylogeny, 
ancestral_state_trace_vector=anc_states_stoch_map,
character_file="HRM4_ER_output_rf/cichlid_tooth_hrm4_er_rf_marginal_character.tree",
posterior_file="HRM4_ER_output_rf/cichlid_tooth_hrm4_er_rf_marginal_posterior.tree",
burnin=0.25,
num_time_slices=500,
reconstruction="marginal")

q()




