### ARD model (no hidden states) ###

morpho <- readDiscreteCharacterData("cichlid_tooth_states.nex")
moves = VectorMoves()
monitors = VectorMonitors()
phylogeny <- readTrees("cichlid_tree.nex")[1]
rate_pr := phylogeny.treeLength() / 100

NUM_STATES = 2
NUM_RATES = NUM_STATES * (NUM_STATES-1)
for ( i in 1:NUM_RATES ) {
    rate[i] ~ dnExp(rate_pr)
    moves.append( mvScale( rate[i], weight=2 ) )
}
Q_morpho := fnFreeK( rate, rescale=false )

### Draw root state frequencies from Dirichlet prior distribution ###
rf_prior <- [1,1]
rf ~ dnDirichlet( rf_prior )
moves.append( mvBetaSimplex( rf, weight=2 ) )
moves.append( mvDirichletSimplex( rf, weight=2 ) )

phyMorpho ~ dnPhyloCTMC(tree=phylogeny, Q=Q_morpho, rootFrequencies=rf, type="Standard")
phyMorpho.clamp(morpho)
mymodel = model(phylogeny)

monitors.append( mnModel(filename="ARD_output/tooth_ARD.log", printgen=1) )
monitors.append( mnScreen(printgen=100) )
monitors.append( mnJointConditionalAncestralState(tree=phylogeny,
                                                   ctmc=phyMorpho,
                                                   filename="ARD_output/tooth_ARD.states.txt",
                                                   type="Standard",
                                                   printgen=1,
                                                   withTips=true,
                                                   withStartStates=false) )
monitors.append( mnStochasticCharacterMap(ctmc=phyMorpho,
                                          filename="ARD_output/tooth_ARD_stoch_char_map.log",
                                          printgen=1,
                                          include_simmap=true) )


### Estimate marginal likelihoods ###
pow_p = powerPosterior(mymodel, moves, monitors, "ARD_output/ARD_tooth.out", cats=100) # Bump up cats #
pow_p.burnin(generations=10000,tuningInterval=1000)
pow_p.run(generations=1000)  

### Stepping stone sampler ###
ss = steppingStoneSampler(file="ARD_output/ARD_tooth.out", powerColumnName="power", likelihoodColumnName="likelihood")
ss.marginal()

q()
