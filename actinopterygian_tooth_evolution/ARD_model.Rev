### ARD model with no hidden states ###

morpho <- readDiscreteCharacterData("tip_states_FINAL.nex")
moves = VectorMoves()
monitors = VectorMonitors()
phylogeny <- readTrees("pruned_tree_FINAL.nexus")[1]

NUM_EVENTS = 200
rate_pr := phylogeny.treeLength() / NUM_EVENTS

NUM_STATES = 2
NUM_RATES = NUM_STATES * (NUM_STATES-1)
for ( i in 1:NUM_RATES ) {
    rate[i] ~ dnExp(rate_pr)
    moves.append( mvScale( rate[i], weight=2 ) )
}

Q_morpho := fnFreeK( rate, rescale=false )

rf_prior <- [1,1]
rf ~ dnDirichlet( rf_prior )
moves.append( mvBetaSimplex( rf, weight=2 ) )
moves.append( mvDirichletSimplex( rf, weight=2 ) )

phyMorpho ~ dnPhyloCTMC(tree=phylogeny, Q=Q_morpho, rootFrequencies=rf, type="Standard")
phyMorpho.clamp(morpho)
mymodel = model(phylogeny) 

monitors.append( mnModel(filename="ARD_output/ARD_model.log", printgen=1) )
monitors.append( mnScreen(printgen=100) )
monitors.append( mnJointConditionalAncestralState(tree=phylogeny,
                                                 ctmc=phyMorpho,
                                                 filename="ARD_output/ARD_model.states.txt",
                                                 type="Standard",
                                                 printgen=200,
                                                 withTips=true,
                                                 withStartStates=false) )

monitors.append( mnStochasticCharacterMap(ctmc=phyMorpho,                                          filename="ARD_output/ARD_model_stoch_char_map.log",
                                          printgen=200,
                                          include_simmap=true) )

### Estimate marginal likelihoods ###
pow_p = powerPosterior(mymodel, moves, monitors, "ARD_output/ARD_model.pp.out", cats=10)
pow_p.burnin(generations=5000,tuningInterval=500)
pow_p.run(generations=1000)  

### Stepping stone sampler ###
ss = steppingStoneSampler(file="ARD_output/ARD_model.pp.out", powerColumnName="power", likelihoodColumnName="likelihood")
ss.marginal()

q()
